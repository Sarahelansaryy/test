name: test-flask workflow

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: "Destroy infrastructure? (yes/no)"
        required: true
        default: "no"

  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.12" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  docker:
    name: containerization
    needs: [test]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: GHCR login
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/test-flask:latest

      - name: Test Docker image
        run: |
          docker images
          docker run --name test-flask -d -p 5000:5000 ${{ vars.DOCKER_USERNAME }}/test-flask:latest
          sleep 5
          echo "Testing Image URL using wget"
          wget -q -O - 127.0.0.1:5000/live | grep live

      - name: Push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/test-flask:latest

  terraform:
    name: terraform deployment
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout config files
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "1.1.7"

      - name: Terraform init
        run: terraform init
        working-directory: ./Terraform

      - name: Terraform plan
        run: terraform plan
        working-directory: ./Terraform

      - name: Terraform apply or destroy
        run: |
          if [ "${{ github.event.inputs.destroy || 'no' }}" = "yes" ]; then
            terraform destroy -auto-approve
          else
            terraform apply -auto-approve
          fi
        working-directory: ./Terraform

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/GitHubActionsEKSRole
          aws-region: eu-central-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name sarah-eks-cluster-45678 --region eu-central-1

      - name: Deploy to EKS
        run: kubectl apply -f k8s/deployment.yaml
